[DEFAULT]
recording_name = live_demo
calibration_folder = data/calibration


[CALIBRATION]
# path where to save recorded images for calibration
save_path_imgs = data/raw/calibration_images/calibration_images/%(recording_name)s
# calibration type- checkerboard or aruco
calibration_type = aruco
# calibration chessboard dims eg (14,10)
checkerboard_dims = (9, 7)
# path where to save calibration data
calibration_data = %(calibration_folder)s
# determines whether to run calibration live on recording or use recorded data
run_live = False


[ARUCO]
# dictionary of aruco board- full list of options can be seen in data/resources/aruco_dict_types.py
aruco_dict = DICT_4X4_50
# The size_in_bits variable must match the size of dictionary, i.e. DICT_4X4_50.
size_in_bits = 4
# The black border surrounded by the aruco marker. Eg. if it is 1 and the aruco itself is
# 4x4, then the aruco will now be 6x6 as the black border goes all around the marker.
border_bits = 1
# This will be the white gap (in bits) between consecutive aruco markers.
gap_between_markers_in_bits = 1
# length of each marker in mm (21)
marker_length = 20
# number of aruco markers along the width of the grid (5)
markers_w = 5
# number of aruco markers along the height of the grid (6)
markers_h = 6
# number of pixels per bit. This will be used to convert bits to pixels for drawing. (10)
pixels_per_bit = 30
# path where aruco board will be saved
save_path = data/resources/aruco_boards/aruco_board.png
# separation between markers (in mm)
marker_separation = 3

pointer_present = True
pointer_aruco_dict = DICT_5X5_50
pointer_marker_length = 20
pointer_marker_separation = 3
pointer_markers_w = 3
pointer_markers_h = 2
pointer_save_path = data/resources/aruco_boards/pointer_board.png


[AR_DISPLAY]
# Path to file containing camera intrinsic parameters (3x3)
intrinsics_pth = %(calibration_folder)s/intrinsics.txt
# Path to file containing camera distortion parameters (1x5).
distortion_pth = %(calibration_folder)s/distortion.txt

# If provided, path to file containing video from realsense camera, or just OpenCV device id. e.g. 0
video_source = 0
#video_source = data/raw/recordings/recordings_realsense/%(recording_name)s/video.mp4

# Path to file containing (4x4) matrix of surface registration, MRI to ArUco.
registration_matrix = data/registration.txt

# Path to directory containing models.
models = data/models

#File name of .json file containing rendering parameters.
rendering_defaults =  rendering_defaults.json

# rate at which video is read
frame_rate = 30

